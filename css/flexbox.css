
.test-list {
  display: flex;
  flex-wrap: wrap;
  flex-flow: row wrap;
  align-items: center;
}

/* items now will display inline/float */
  /*many properties can now be applied for styling to this flex container*/
  /*flex-direction: row || column || row-reverse || column-reverse;
  let's you decide how the flex items are laid out. Either horizontally, vertically or reversed in both directions.
  In flex world horizontal and vertical are actually main-axis (x) and cross-axis (y)*/
  
  /*the reason why we saw the ul go horizontally is because by default the property is set to main-axis (row)*/
  /*to get items to stack vertically you would change the font-direction property to column (basically block)*/
  /*default setting of flex box is to keep fitting children into row or column (as styled) even if you need to scroll to keep going to see the info*/
  /*basically the flex-wrap property is set to nowrap automatically*/
  /*flex-wrap takes on three values; wrap, nowrap wrap-reverse*/
  /*now that we have set it to wrap we have told the container to break up into a new line when the width of the viewspace runs out*/
  /*wrap-reverse does the same thing as wrap but backwards*/
  /*another property is flex-flow which takes the same values as flex direction and flex wrap*/
  /*this property is the same as the border shorthand property, you can put multiple values in one property for a shortcut*/
  /*justify-content property takes on 5 values: flex-start || flex-end || center || space-between || space-around */
  /* this property is used similar to the text align property, it will position the container &its children along the main-axis (row only)*/
  /*flex start will group the children at the start of the main axis, flex end will do the opposite (like float right or left), center will center the children alog the axis, space-between will create space between the children and sapce around will create the same amount of space around each child (like margin)*/
  /*similar to the justify content property, the align items property focuses on alignment on the cross -axis*/
  /*there are many values the align-items property takes, stretch (which fills up as much of the height of the child) flex-start, flex-end, center (all similar to justify-content), baseline, align-content (does the same as a wrap property for the cross-axis)*/
  
.test-list li { /* now these items are the flex items and the ul which is the parent element becomes the flex container*/
  width: 200px;
  height: 100px;
  background-color: #8cacea;
  margin: 8px;
  flex-basis: 100px;
}

/*like the flex container there are properties for styling the flex items individually instead of as a collective */
/* other style options include flex grow and flex shrink*/
/*flex grow property is off as a default, however if you add any value from 1 to any positive number the box will take up all the space of the block*/
/*since the flex shrink is always set to 1 by default, it will always be responsive to the viewspace and shrink accordingly*/

.test-list:nth-child(1) {
        order: 1; /*give it a value higher than 0*/
    }

/*similar to zindex you can use the order property to reorder list items without updating the html. So if you want the first list item to actually be the last you could make the order value of that flex item 1 higher than that of the other items*/
/*the flex items are defaulted at value 0 for order*/

.test-list:nth-child(9) {
        flex-basis: 50px;
    }
    

/*when using the property flex-basis you can use the values em px and percentage. be mindful that flex basis is set to auto as a default and that is why the flex items grow with the content in the box as opposed to wrapping, with this property you can create a fixed with in a flex item so the content wraps*/
/*you also have the option to use shorthand css with flex property, it will be grow, shrink and basis so for example flex: 0 1 auto; */

.test-list:nth-child(2) {
  flex: 2 1 0;
}

.test-list:nth-child(3) {
  flex: 1 1 0;
  margin-left: auto;
  margin-right: auto;
}
/*so if two list children have the flex grow property to 1 and 2 then the one with value 2 will take up 2 tenths of block while the other takes 1 tenth, simple math*/

/*target first list item*/
.test-list:first-of-type {
    align-self: center;
}
/* jus like the justify content or align content properties you can use the align self property to align individual items along the axis*/
/*this property takes on the same values as justify content and align content*/

/*ABSOLUTE AND RELATIVE FLEX*/
/*absolute flex refers to fixed flex items that usually have a flex property with a value of 1 or higher*/
/*relative flex refers to an automatic flex item that grows with its content*/

/*using margin auto on flex items is not advised, this is because it can disrupt the normal flow of positioning of nearby items, addiontally the justify content property is no longer usable*/

.nav-list:nth-child(4) {
  margin-left: auto;
  margin-right: auto;
  
}

.nav-list li {
  width: 100px;
  height: 100px;
  background-color: #8cacea;
}

/* DONT REALLY UNDERSTAND HOW TO USE MARGIN AUTO IN FLEX BOX" */







